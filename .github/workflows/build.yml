name: CI

on: push

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: '0'

      - name: Check if CI needs to be skipped
        uses: mstachniuk/ci-skip@v1
        with:
          fail-fast: true

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: '@${{ github.workspace }}/vcpkg-dependencies.txt'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          appendedCacheKey: ${{ hashFiles( '${{ github.workspace}}/vcpkg-dependencies.txt' ) }}

      - name: Use GCC 10 by default
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 110
          sudo update-alternatives --set cc /usr/bin/gcc

          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 110
          sudo update-alternatives --set c++ /usr/bin/g++
        if: matrix.os == 'ubuntu-20.04'

      - name: Build
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
          buildDirectory: '${{ github.workspace }}/build'
          cmakeAppendedArgs: '-DMATRIXPP_BUILD_TESTS=TRUE -DMATRIXPP_BUILD_BENCHMARKS=TRUE -DCMAKE_BUILD_TYPE=Release'

      - name: Tar test artifacts
        run: |
          cd '${{ github.workspace }}/build/bin/tests'
          tar -cf '${{ github.workspace}}/tests.tar' .

      - name: Tar benchmark artifacts
        run: |
          cd '${{ github.workspace }}/build/bin/benchmarks'
          tar -cf '${{ github.workspace }}/benchmarks.tar' .

      - name: Upload test artifacts
        uses: actions/upload-artifact@v2
        with:
          name: tests
          path: '${{ github.workspace }}/tests.tar'

      - name: Upload compile tests
        uses: actions/upload-artifact@v2
        with:
          name: compile_tests
          path: '${{ github.workspace }}/tests/compile_tests'

      - name: Upload benchmark artifacts
        uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: '${{ github.workspace }}/benchmarks.tar'
  
  LitTest:
    name: Lit Test
    needs: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install valgrind
        run: sudo apt-get install valgrind

      - name: Install Python Lit
        run: |
          pip install lit
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Download test artifacts
        uses: actions/download-artifact@v2
        with:
          name: tests
          path: '${{ github.workspace }}/build/bin/tests'

      - name: Download compile tests
        uses: actions/download-artifact@v2
        with:
          name: compile_tests
          path: '${{ github.workspace }}/tests/compile_tests'

      - name: Extract test artifacts
        run: |
          cd '${{ github.workspace }}/build/bin/tests'
          tar -xf tests.tar

      - name: Test
        run: |
          cd '${{ github.workspace }}/build/bin/tests'
          lit compile_tests unit_tests --xunit-xml-output results.xml --vg --vg-leak
        env:
          CC: /usr/bin/gcc-10
          CXX: /usr/bin/g++-10

      - name: Publish Unit and Compile Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.6
        with:
          files: '**/results.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

  Benchmarks:
    needs: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download benchmark artifacts
        uses: actions/download-artifact@v2
        with:
          name: benchmarks
          path: '${{ github.workspace }}/build/bin/benchmarks'

      - name: Extract benchmark artifacts
        run: |
          cd '${{ github.workspace }}/build/bin/benchmarks'
          tar -xf benchmarks.tar

      - name: Benchmark
        run: |
          cd '${{ github.workspace }}/build/bin/benchmarks'
          ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json

      - name: Publish Benchmark Results
        uses: rhysd/github-action-benchmark@v1
        with:
          tool: 'googlecpp'
          output-file-path: '${{ github.workspace }}/build/bin/benchmarks/results.json'
          github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          auto-push: true
