name: CI

jobs:
- job: FormatValidation
  displayName: Format Validation
  pool:
    vmImage: ubuntu-20.04

  steps:
  - checkout: self
    submodules: true

  - script: curl https://raw.githubusercontent.com/Sarcasm/run-clang-format/master/run-clang-format.py --output run-clang-format.py
    displayName: Download run-clang-format.py

  - script: python ./run-clang-format.py -r include tests benchmarks --style file
    displayName: Validate

- job: BuildAndTestAndBenchmarkUbuntu
  displayName: Build / Test / Benchmark / Code Coverage (Ubuntu)

  pool:
    vmImage: ubuntu-20.04

  steps:
  - checkout: self
    submodules: true

  - task: Cache@2
    displayName: Cache vcpkg
    inputs:
      key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
      path: '$(Build.SourcesDirectory)/vcpkg'

  - task: run-vcpkg@0
    displayName: Run vcpkg
    inputs:
      vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
      vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg

  - script: |
      pip3 install lit
      echo '##vso[task.prependpath]$(HOME)/.local/bin'
    displayName: Install Python LLVM Lit

  - script: |
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
      sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

      sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 100
      sudo update-alternatives --set cc /usr/bin/gcc

      sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 100
      sudo update-alternatives --set c++ /usr/bin/g++
    displayName: Use GCC 10 by default

  - script: |
      sudo apt-get update
      sudo apt-get install gcovr
    displayName: Install Gcovr

  - script: cmake -DMATRIXPP_BUILD_TESTS=TRUE -DMATRIXPP_BUILD_BENCHMARKS=TRUE -DMATRIXPP_CODE_COVERAGE=TRUE -B build
    displayName: Configure

  - script: cmake --build build --config Debug --target matrixpp_code_coverage
    displayName: Generate Code Coverage in Debug Configuration
    continueOnError: true

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: build/matrixpp_code_coverage.xml
      pathToSources: $(Build.SourcesDirectory)
    displayName: Publish Code Coverage

  - script: |
      cd build/bin/tests
      lit compile_tests unit_tests --xunit-xml-output results.xml
    continueOnError: true
    displayName: Run Lit Test

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '**/results.xml' 
    displayName: Publish Lit Test Results

  - script: cmake --build build --config Release --target benchmark
    displayName: Build Benchmarks in Release Configuration

  - script: |
      cd build/bin/benchmarks/Release
      ./benchmark --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
    displayName: Run All Benchmarks

# - job: BuildAndTestWindows
#   displayName: Build / Test / Benchmark (Windows)

#   pool:
#     vmImage: windows-latest

#   steps:
#   - checkout: self
#     submodules: true

#   - task: Cache@2
#     displayName: Cache vcpkg
#     inputs:
#       key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
#       path: '$(Build.SourcesDirectory)/vcpkg'

#   - task: run-vcpkg@0
#     displayName: Run vcpkg
#     inputs:
#       vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
#       vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg
#       vcpkgTriplet: x64-windows

#   - script: |
#       pip3 install lit
#       echo '##vso[task.prependpath]$(HOME)/.local/bin'
#     displayName: Install Python LLVM Lit

#   - script: |
#       call "%PROGRAMFILES(X86)%\Microsoft Visual Studio\2019\Preview\Common7\Tools\VsDevCmd.bat" -host_arch=amd64 -arch=amd64 -no_logo
#       cmake -DMATRIXPP_BUILD_TESTS=TRUE -DMATRIXPP_BUILD_BENCHMARKS=FALSE -B build
#       cmake --build build
#     displayName: Configure and Build

#   - script: |
#       cd build/bin/tests
#       lit compile_tests unit_tests --xunit-xml-output results.xml
#     continueOnError: true
#     displayName: Run Lit Test

#   - task: PublishTestResults@2
#     inputs:
#       testResultsFormat: JUnit
#       testResultsFiles: '**/results.xml' 
#     displayName: Publish Lit Test Results

  # - script: cmake --build build --config Release
  #   displayName: Build in Release Configuration

  # - script: |
  #     cd build/bin/benchmarks/Release
  #     ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
  #   displayName: Run All Benchmarks

# - job: BuildAndTestMacOS
#   displayName: Build / Test / Benchmark (MacOS)

#   pool:
#     vmImage: macos-latest

#   steps:
#   - checkout: self
#     submodules: true

#   - task: Cache@2
#     displayName: Cache vcpkg
#     inputs:
#       key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
#       path: '$(Build.SourcesDirectory)/vcpkg'

#   - task: run-vcpkg@0
#     displayName: Run vcpkg
#     inputs:
#       vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
#       vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg

#   - script: |
#       pip3 install lit
#       echo '##vso[task.prependpath]$(HOME)/.local/bin'
#     displayName: Install Python LLVM Lit

#   - task: run-cmake@0
#     inputs:
#       cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
#       cmakeAppendedArgs: -G "Ninja Multi-Config" -DMATRIXPP_BUILD_TESTS=TRUE -DMATRIXPP_BUILD_BENCHMARKS=FALSE
#       buildDirectory: build
#     displayName: Configure and Build

#   - script: |
#       cd build/bin/tests
#       lit compile_tests unit_tests --xunit-xml-output results.xml
#     continueOnError: true
#     displayName: Run Lit Test

#   - task: PublishTestResults@2
#     inputs:
#       testResultsFormat: JUnit
#       testResultsFiles: '**/results.xml' 
#     displayName: Publish Lit Test Results

  # - script: cmake --build build --config Release
  #   displayName: Build in Release Configuration

  # - script: |
  #     cd build/bin/benchmarks/Release
  #     ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
  #   displayName: Run All Benchmarks