name: CI

jobs:
  - job: FormatValidation
    displayName: Format Validation
    pool:
      vmImage: ubuntu-20.04

    steps:
      - checkout: self

      - script: |
          git clone https://github.com/Sarcasm/run-clang-format
        displayName: Clone run-clang-format

      - script: |
          sudo apt-get update
          sudo apt-get install clang-format-11
        displayName: Install Clang-Format 11

      - script: python ./run-clang-format/run-clang-format.py -r include external/tests external/benchmarks --style file --clang-format-executable=clang-format-11
        displayName: Validate

  - job: UbuntuGCC10Point2
    displayName: Ubuntu GCC 10

    pool:
      vmImage: ubuntu-20.04

    steps:
      - checkout: self

      - script: |
          pip3 install lit==12.0.0rc1 --no-warn-script-location # @TODO: Don't install release candidate once LLVM 12 officially releases
          echo '##vso[task.prependpath]$(HOME)/.local/bin'
        displayName: Install Python LLVM Lit

      - script: |
          sudo apt-get update
          sudo apt-get install gcovr
        displayName: Install GCC Gcovr

      - script: cmake -DCMAKE_BUILD_TYPE=Debug -DMPP_BUILD_TESTS=TRUE -DMPP_CODE_COVERAGE=TRUE -DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 -B build
        displayName: Configure For Tests and Code Coverage in Debug Configuration

      - script: cmake --build build --config Debug --target tests
        displayName: Build Tests

      - script: |
          cd build/bin/tests
          lit . --xunit-xml-output results.xml
        continueOnError: true # Tests might fail, but we still want the results
        displayName: Run Tests

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: "**/results.xml"
        displayName: Publish Tests Results

      - script: cmake --build build --config Debug --target mpp_code_coverage
        displayName: Generate Code Coverage

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: cobertura
          summaryFileLocation: build/mpp_code_coverage.xml
          pathToSources: $(Build.SourcesDirectory)
        displayName: Publish Code Coverage

      - script: cmake -DCMAKE_BUILD_TYPE=Release -DMPP_BUILD_BENCHMARKS=TRUE -DCMAKE_C_COMPILER=/usr/bin/gcc-10 -DCMAKE_CXX_COMPILER=/usr/bin/g++-10 -B build
        displayName: Configure For Benchmarks in Release Configuration

      - script: cmake --build build --config Release --target benchmarks
        displayName: Build Benchmarks

      - script: |
          cd build/bin/benchmarks
          ./initialization_benchmark # @TODO: Find a way to invoke multiple executables in this directory as we're not using LLVM Lit for benchmarks (#174)
        displayName: Run All Benchmarks

  - job: UbuntuClang11Point0Point1
    displayName: Ubuntu Clang 11

    pool:
      vmImage: ubuntu-20.04

    steps:
      - checkout: self

      - script: |
          pip3 install lit==12.0.0rc1 --no-warn-script-location # @TODO: Don't install release candidate once LLVM 12 officially releases
          echo '##vso[task.prependpath]$(HOME)/.local/bin'
        displayName: Install Python LLVM Lit

      - script: |
          sudo apt-get update
          sudo apt-get install clang-11 clang++-11
        displayName: Install Clang 11

      - script: cmake -DCMAKE_BUILD_TYPE=Debug -DMPP_BUILD_TESTS=TRUE -DCMAKE_C_COMPILER=/usr/bin/clang-11 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-11 -B build
        displayName: Configure For Tests in Debug Configuration

      - script: cmake --build build --config Debug --target tests
        displayName: Build Tests

      - script: |
          cd build/bin/tests
          lit . --xunit-xml-output results.xml
        continueOnError: true # Tests might fail, but we still want the results
        displayName: Run Tests

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: "**/results.xml"
        displayName: Publish Tests Results

      - script: cmake -DCMAKE_BUILD_TYPE=Release -DMPP_BUILD_BENCHMARKS=TRUE -DCMAKE_C_COMPILER=/usr/bin/clang-11 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-11 -B build
        displayName: Configure For Benchmarks in Release Configuration

      - script: cmake --build build --config Release --target benchmarks
        displayName: Build Benchmarks

      - script: |
          cd build/bin/benchmarks
          ./initialization_benchmark # @TODO: Find a way to invoke multiple executables in this directory as we're not using LLVM Lit for benchmarks (#174)
        displayName: Run All Benchmarks
  - job: WindowsClang
    displayName: Windows Clang 11

    pool:
      vmImage: windows-latest

    steps:
      - script: call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
        displayName: Activate Developer Command Prompt For x64

      - script: cl
# - job: BuildAndTestWindows
#   displayName: Build / Test / Benchmark (Windows)

#   pool:
#     vmImage: windows-latest

#   steps:
#   - checkout: self
#     submodules: true

#   - task: Cache@2
#     displayName: Cache vcpkg
#     inputs:
#       key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
#       path: '$(Build.SourcesDirectory)/vcpkg'

#   - task: run-vcpkg@0
#     displayName: Run vcpkg
#     inputs:
#       vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
#       vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg
#       vcpkgTriplet: x64-windows

#   - script: |
#       pip3 install lit
#       echo '##vso[task.prependpath]$(HOME)/.local/bin'
#     displayName: Install Python LLVM Lit

#   - script: |
#       call "%PROGRAMFILES(X86)%\Microsoft Visual Studio\2019\Preview\Common7\Tools\VsDevCmd.bat" -host_arch=amd64 -arch=amd64 -no_logo
#       cmake -Dmpp_BUILD_TESTS=TRUE -Dmpp_BUILD_BENCHMARKS=FALSE -B build
#       cmake --build build
#     displayName: Configure and Build

#   - script: |
#       cd build/bin/tests
#       lit compile_tests unit_tests --xunit-xml-output results.xml
#     continueOnError: true
#     displayName: Run Lit Test

#   - task: PublishTestResults@2
#     inputs:
#       testResultsFormat: JUnit
#       testResultsFiles: '**/results.xml'
#     displayName: Publish Lit Test Results

# - script: cmake --build build --config Release
#   displayName: Build in Release Configuration

# - script: |
#     cd build/bin/benchmarks/Release
#     ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
#   displayName: Run All Benchmarks

# - job: BuildAndTestMacOS
#   displayName: Build / Test / Benchmark (MacOS)

#   pool:
#     vmImage: macos-latest

#   steps:
#   - checkout: self
#     submodules: true

#   - task: Cache@2
#     displayName: Cache vcpkg
#     inputs:
#       key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
#       path: '$(Build.SourcesDirectory)/vcpkg'

#   - task: run-vcpkg@0
#     displayName: Run vcpkg
#     inputs:
#       vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
#       vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg

#   - script: |
#       pip3 install lit
#       echo '##vso[task.prependpath]$(HOME)/.local/bin'
#     displayName: Install Python LLVM Lit

#   - task: run-cmake@0
#     inputs:
#       cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
#       cmakeAppendedArgs: -G "Ninja Multi-Config" -Dmpp_BUILD_TESTS=TRUE -Dmpp_BUILD_BENCHMARKS=FALSE
#       buildDirectory: build
#     displayName: Configure and Build

#   - script: |
#       cd build/bin/tests
#       lit compile_tests unit_tests --xunit-xml-output results.xml
#     continueOnError: true
#     displayName: Run Lit Test

#   - task: PublishTestResults@2
#     inputs:
#       testResultsFormat: JUnit
#       testResultsFiles: '**/results.xml'
#     displayName: Publish Lit Test Results

# - script: cmake --build build --config Release
#   displayName: Build in Release Configuration

# - script: |
#     cd build/bin/benchmarks/Release
#     ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
#   displayName: Run All Benchmarks
