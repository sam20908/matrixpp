name: CI

jobs:
- job: FormatValidation
  displayName: Format Validation
  pool:
    vmImage: ubuntu-20.04

  steps:
  - checkout: self
    submodules: true

  - script: curl https://raw.githubusercontent.com/Sarcasm/run-clang-format/master/run-clang-format.py --output run-clang-format.py
    displayName: Download run-clang-format.py

  - script: python ./run-clang-format.py -r include tests benchmarks --style file
    displayName: Validate

- job: BuildAndTestAndBenchmark
  displayName: Build / Test / Benchmark / Code Coverage

  strategy:
    matrix:
      'Ubuntu GCC 10':
        os: ubuntu-20.04
        CC: 'gcc-10'
        CXX: 'g++-10'
  pool:
    vmImage: $(os)

  variables:
    CC: $(CC)
    CXX: $(CXX)
  
  steps:
  - checkout: self
    submodules: true

  - task: Cache@2
    displayName: Cache vcpkg
    inputs:
      key: $(Build.SourcesDirectory)/vcpkg-dependencies.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
      path: '$(Build.SourcesDirectory)/vcpkg'

  - task: run-vcpkg@0
    displayName: Run vcpkg
    inputs:
      vcpkgArguments: '@$(Build.SourcesDirectory)/vcpkg-dependencies.txt'
      vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg

  - script: |
      sudo apt-get update
      sudo apt-get install gcovr
    displayName: Install Gcovr

  - task: run-cmake@0
    displayName: Configure and Build
    inputs:
      cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
      cmakeAppendedArgs: -G "Ninja Multi-Config" -DMATRIXPP_BUILD_TESTS=TRUE -DMATRIXPP_BUILD_BENCHMARKS=TRUE -DMATRIXPP_CODE_COVERAGE=TRUE
      buildDirectory: build

  - script: cmake --build build --config Debug --target matrixpp_code_coverage
    displayName: Generate Code Coverage in Debug Configuration

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: build/matrixpp_code_coverage.xml
      pathToSources: $(Build.SourcesDirectory)
    displayName: Publish Code Coverage

  - script: |
      pip3 install lit
      echo '##vso[task.prependpath]$(HOME)/.local/bin'
    displayName: Install Python LLVM Lit

  - script: |
      cd build/bin/tests
      lit compile_tests unit_tests --xunit-xml-output results.xml
    displayName: Run Lit Test

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '**/results.xml' 
      failTaskOnFailedTests: true
    displayName: Publish Lit Test Results

  - script: cmake --build build --target all --config Release
    displayName: Build in Release Configuration

  - script: |
      cd build/bin/benchmarks/Release
      ./all_benchmarks --benchmark_format=console --benchmark_out_format=json --benchmark_out=results.json
    displayName: Run All Benchmarks